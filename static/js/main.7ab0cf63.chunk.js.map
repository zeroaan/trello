{"version":3,"sources":["store/actions/types.ts","store/reducers/trello.ts","store/reducers/index.ts","store/index.ts","components/BoardCreate.tsx","store/actions/trello.ts","components/Navbar.tsx","components/TrelloBoards.tsx","components/Trello.tsx","components/CardContent.tsx","components/Card.tsx","components/ListTitle.tsx","components/ListAction.tsx","components/ListCardAdd.tsx","components/List.tsx","components/BoardStar.tsx","components/BoardTitle.tsx","components/BoardDelete.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["CHANGE_BOARD_NAME","ADD_BOARD","STAR_BOARD","DELETE_BOARD","CHANGE_LIST_TITLE","ADD_LIST","COPY_LIST","DELETE_LIST","SORT_LIST","ADD_CARD","EDIT_CARD","DELETE_CARD","initialState","boardId","listId","cardId","starCount","boards","id","star","boardName","lists","title","cards","text","BoardReducer","state","action","type","newBoard","i","length","newBoardName","count","splice","index","newTitle","newCardId","newCard","j","droppableIdStart","droppableIdEnd","list","find","card","droppableIndexStart","droppableIndexEnd","listStart","listEnd","listIndex","rootReducer","combineReducers","trello","createStoreWithMiddleware","applyMiddleware","ReduxThunk","createStore","persistConfig","key","storage","store","persistReducer","Reducer","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","DivNewBoard","styled","div","CardNewBoard","Card","H3BoardTitle","h3","InputNewBoard","input","ButtonNewBoard","button","CloseIconNewBoard","CloseIcon","BoardCreate","setCreateBoard","history","useHistory","dispatch","useDispatch","useSelector","useState","setNewBoard","onClickClose","placeholder","value","onChange","e","target","maxLength","autoFocus","onClick","push","useStyles","makeStyles","appbar","backgroundColor","boxShadow","toolbar","display","justifyContent","minHeight","flexbox","homeLink","textDecoration","padding","homeiconbutton","width","height","color","background","homebutton","textTransform","typography","fontFamily","position","right","userSelect","addiconbutton","margin","borderRadius","avatar","cursor","Navbar","classes","createBoard","AppBar","className","Toolbar","to","IconButton","Button","Typography","variant","Avatar","DivBoard","DivBoardBox","DivBoardLink","Link","TrelloBoards","map","v","DivHome","DivBoards","Trello","PaperCardContent","Paper","PListText","p","CreateIconCardContent","CreateIcon","DivBlack","DivEmptyBox","TextareaCardContent","textarea","CloseIconCardContent","ButtonCardEdit","ButtonCardDelete","CardContent","edit","setCardEditBox","editList","setEditList","useEffect","onClickEditOpen","onClickEditClose","onChangeEditList","onClickSave","editCard","onClickDelete","deleteCard","DivCardMargin","ListCard","cardEditBox","style","draggableId","String","provided","draggableProps","dragHandleProps","ref","innerRef","CardHeaderTitle","CardHeader","InputTitle","ListTitle","changeTitle","setChangeTitle","textTitle","setTextTitle","onClickTitle","onSubmitForm","preventDefault","onBlurInput","onChangeInput","changeListTitle","onSubmit","onBlur","disableTypography","DivActionBt","ButtonListAc","DivAction","InputCopy","ButtonCopyAc","PDelete","ButtonDeleteAc","PaperListAc","TypographyListAc","CloseIconListAc","HrListAc","hr","ListAction","setActionOpen","newList","setNewList","copyAction","setCopyAction","deleteAction","setDeleteAction","onClickListAcClose","onClickListAcAddCard","onClickListAcCopy","onClickListAcDelete","onChangeList","onClickAddList","copyList","onClickDeleteList","deleteList","ActionTitle","onMouseLeave","disableRipple","ButtonLCAc","props","mycolor","DivBackGroundColor","TextareaLCAc","ButtonAddLCAc","CloseIconLCAc","ListCardAdd","addInput","setaddInput","setText","inputEl","useRef","onClickOpen","onChangeCard","onClickAddCard","addList","addCard","current","focus","buttonValue","AddButtonValue","buttonValueColor","BackgroundColor","InputHeight","CardList","ButtonAction","CardContentList","DivCardAction","List","actionOpen","droppableId","droppableProps","ButtonStar","BoardStarButton","boardStar","StarColor","starBoard","TypographyBoardTitle","FormBoardTitle","form","InputBoardTitle","BoardTitle","titleInput","setTitleInput","boardText","setBoardText","onChangeName","changeBoardName","ButtonBoardDelete","DivBoardDelete","CardBoardDelete","H3BoardDelete","PBoardDelete","ButtonBoardDeleteDispatch","CloseIconBoardDelete","BoardDelete","deleteBox","setDeleteBox","onClickDeleteBoard","deleteBoard","DeleteButton","fontSize","DivScreen","DivFlex","DivListAdd","Board","match","useRouteMatch","Number","params","firstBoardName","forEach","setBoardName","BoardStar","onDragEnd","result","destination","source","sortList","undefined","App","basename","process","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ab0cf63.chunk.js","sourcesContent":["export const CHANGE_BOARD_NAME = \"CHANGE_BOARD_NAME\" as const;\r\nexport const ADD_BOARD = \"ADD_BOARD\" as const;\r\nexport const STAR_BOARD = \"STAR_BOARD\" as const;\r\nexport const DELETE_BOARD = \"DELETE_BOARD\" as const;\r\n\r\nexport const CHANGE_LIST_TITLE = \"CHANGE_LIST_TITLE\" as const;\r\nexport const ADD_LIST = \"ADD_LIST\" as const;\r\nexport const COPY_LIST = \"COPY_LIST\" as const;\r\nexport const DELETE_LIST = \"DELETE_LIST\" as const;\r\nexport const SORT_LIST = \"SORT_LIST\" as const;\r\n\r\nexport const ADD_CARD = \"ADD_CARD\" as const;\r\nexport const EDIT_CARD = \"EDIT_CARD\" as const;\r\nexport const DELETE_CARD = \"DELETE_CARD\" as const;\r\n","import {\r\n  CHANGE_BOARD_NAME,\r\n  ADD_BOARD,\r\n  STAR_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_LIST_TITLE,\r\n  ADD_LIST,\r\n  COPY_LIST,\r\n  DELETE_LIST,\r\n  SORT_LIST,\r\n  ADD_CARD,\r\n  EDIT_CARD,\r\n  DELETE_CARD,\r\n} from \"../actions/types\";\r\nimport {\r\n  ChangeBoardNameAction,\r\n  AddBoardAction,\r\n  StarBoardAction,\r\n  DeleteBoardAction,\r\n  ChangeListTitleAction,\r\n  AddListAction,\r\n  CopyListAction,\r\n  DeleteListAction,\r\n  SortListAction,\r\n  AddCardAction,\r\n  EditCardAction,\r\n  DeleteCardAction,\r\n} from \"../actions/trello\";\r\n\r\nexport type CardType = {\r\n  id: string;\r\n  text: string;\r\n}[];\r\nexport type ListType = {\r\n  id: string;\r\n  title: string;\r\n  cards: CardType;\r\n}[];\r\nexport type BoardType = {\r\n  id: number;\r\n  star: boolean;\r\n  boardName: string;\r\n  lists: ListType;\r\n};\r\n\r\nexport interface BoardState {\r\n  boardId: number;\r\n  listId: number;\r\n  cardId: number;\r\n  starCount: number;\r\n  boards: BoardType[];\r\n}\r\n\r\nconst initialState: BoardState = {\r\n  boardId: 2,\r\n  listId: 6,\r\n  cardId: 18,\r\n  starCount: 1,\r\n  boards: [\r\n    {\r\n      id: 0,\r\n      star: true,\r\n      boardName: \"first board\",\r\n      lists: [\r\n        {\r\n          id: `list-${0}`,\r\n          title: \"To do\",\r\n          cards: [\r\n            { id: `card-${0}`, text: \"doing\" },\r\n            { id: `card-${1}`, text: \"test a game\" },\r\n            { id: `card-${2}`, text: \"post\" },\r\n            { id: `card-${3}`, text: \"hello\" },\r\n          ],\r\n        },\r\n        {\r\n          id: `list-${1}`,\r\n          title: \"Doing\",\r\n          cards: [\r\n            { id: `card-${4}`, text: \"go to school\" },\r\n            { id: `card-${5}`, text: \"watch\" },\r\n          ],\r\n        },\r\n        {\r\n          id: `list-${2}`,\r\n          title: \"Complete\",\r\n          cards: [\r\n            { id: `card-${6}`, text: \"pratice\" },\r\n            { id: `card-${7}`, text: \"finish\" },\r\n            { id: `card-${8}`, text: \"complete\" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 1,\r\n      star: false,\r\n      boardName: \"second board\",\r\n      lists: [\r\n        {\r\n          id: `list-${3}`,\r\n          title: \"To do\",\r\n          cards: [\r\n            { id: `card-${9}`, text: \"wow\" },\r\n            { id: `card-${10}`, text: \"my second board\" },\r\n            { id: `card-${11}`, text: \"front\" },\r\n          ],\r\n        },\r\n        {\r\n          id: `list-${4}`,\r\n          title: \"Doing\",\r\n          cards: [\r\n            { id: `card-${12}`, text: \"buy coffee\" },\r\n            { id: `card-${13}`, text: \"movie\" },\r\n            { id: `card-${14}`, text: \"go to park\" },\r\n            { id: `card-${15}`, text: \"learn math\" },\r\n          ],\r\n        },\r\n        {\r\n          id: `list-${5}`,\r\n          title: \"Complete\",\r\n          cards: [\r\n            { id: `card-${16}`, text: \"go to the gym\" },\r\n            { id: `card-${17}`, text: \"computer\" },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport type ReducerActions =\r\n  | ChangeBoardNameAction\r\n  | AddBoardAction\r\n  | StarBoardAction\r\n  | DeleteBoardAction\r\n  | ChangeListTitleAction\r\n  | AddListAction\r\n  | CopyListAction\r\n  | DeleteListAction\r\n  | SortListAction\r\n  | AddCardAction\r\n  | EditCardAction\r\n  | DeleteCardAction;\r\nconst BoardReducer = (state = initialState, action: ReducerActions) => {\r\n  switch (action.type) {\r\n    case CHANGE_BOARD_NAME: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].boardName = action.newBoardName;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    case ADD_BOARD: {\r\n      const newBoard: BoardType[] = [\r\n        ...state.boards,\r\n        {\r\n          id: state.boardId,\r\n          star: false,\r\n          boardName: action.newBoardName,\r\n          lists: [\r\n            { id: `list-${state.listId}`, title: \"To do\", cards: [] },\r\n            {\r\n              id: `list-${state.listId + 1}`,\r\n              title: \"Doing\",\r\n              cards: [],\r\n            },\r\n            {\r\n              id: `list-${state.listId + 2}`,\r\n              title: \"Complete\",\r\n              cards: [],\r\n            },\r\n          ],\r\n        },\r\n      ];\r\n      return {\r\n        ...state,\r\n        boards: [...newBoard],\r\n        boardId: state.boardId + 1,\r\n        listId: state.listId + 3,\r\n      };\r\n    }\r\n    case STAR_BOARD: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let count = 0;\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].star = !newBoard[i].star;\r\n        }\r\n        if (newBoard[i].star === true) {\r\n          count = count + 1;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard], starCount: count };\r\n    }\r\n    case DELETE_BOARD: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let count = state.starCount;\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          if (newBoard[i].star === true) {\r\n            count = count - 1;\r\n          }\r\n          newBoard.splice(i, 1);\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard], starCount: count };\r\n    }\r\n    case CHANGE_LIST_TITLE: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists[action.index].title = action.newTitle;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    case ADD_LIST: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists = [\r\n            ...newBoard[i].lists,\r\n            {\r\n              id: `list-${state.listId}`,\r\n              title: action.title,\r\n              cards: [],\r\n            },\r\n          ];\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard], listId: state.listId + 1 };\r\n    }\r\n    case COPY_LIST: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let newCardId = state.cardId;\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          const newCard = [...newBoard[i].lists[action.index].cards];\r\n          newCardId += newCard.length;\r\n          let j = 0;\r\n          while (j < newCard.length) {\r\n            newCard[j] = { ...newCard[j], id: `card-${state.cardId + j}` };\r\n            j = j + 1;\r\n          }\r\n          newBoard[i].lists.splice(action.index + 1, 0, {\r\n            id: `list-${state.listId}`,\r\n            title: action.title,\r\n            cards: [...newCard],\r\n          });\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return {\r\n        ...state,\r\n        boards: [...newBoard],\r\n        listId: state.listId + 1,\r\n        cardId: newCardId,\r\n      };\r\n    }\r\n    case DELETE_LIST: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists.splice(action.index, 1);\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    case SORT_LIST: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          if (action.droppableIdStart === action.droppableIdEnd) {\r\n            const list = newBoard[i].lists.find((list) => action.droppableIdStart === list.id);\r\n            if (list) {\r\n              const card = list.cards.splice(action.droppableIndexStart, 1);\r\n              list.cards.splice(action.droppableIndexEnd, 0, ...card);\r\n            }\r\n          }\r\n          if (action.droppableIdStart !== action.droppableIdEnd) {\r\n            const listStart = newBoard[i].lists.find((list) => action.droppableIdStart === list.id);\r\n            const listEnd = newBoard[i].lists.find((list) => action.droppableIdEnd === list.id);\r\n            if (listStart && listEnd) {\r\n              const card = listStart.cards.splice(action.droppableIndexStart, 1);\r\n              listEnd.cards.splice(action.droppableIndexEnd, 0, ...card);\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    case ADD_CARD: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists[action.index].cards = [\r\n            ...newBoard[i].lists[action.index].cards,\r\n            {\r\n              id: `card-${state.cardId}`,\r\n              text: action.card,\r\n            },\r\n          ];\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard], cardId: state.cardId + 1 };\r\n    }\r\n    case EDIT_CARD: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists[action.listIndex].cards[action.index].text = action.newCard;\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    case DELETE_CARD: {\r\n      const newBoard: BoardType[] = [...state.boards];\r\n      let i = 0;\r\n      while (i < newBoard.length) {\r\n        if (newBoard[i].id === action.boardId) {\r\n          newBoard[i].lists[action.listIndex].cards.splice(action.index, 1);\r\n          break;\r\n        }\r\n        i = i + 1;\r\n      }\r\n      return { ...state, boards: [...newBoard] };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default BoardReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport trello from \"./trello\";\r\n\r\nconst rootReducer = combineReducers({\r\n  trello,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport Reducer from \"store/reducers\";\r\n\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(ReduxThunk)(createStore);\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst enhancedReducer = persistReducer(persistConfig, Reducer);\r\n\r\nexport const store = createStoreWithMiddleware<any, any>(\r\n  enhancedReducer,\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { useState, Dispatch, SetStateAction } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { addBoard } from \"store/actions/trello\";\r\nimport { RootState } from \"store/reducers\";\r\nimport { BoardState } from \"store/reducers/trello\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst DivNewBoard = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 1100;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\nconst CardNewBoard = styled(Card)`\r\n  background-color: rgb(235, 236, 240);\r\n  width: 370px;\r\n  height: 200px;\r\n  margin: auto;\r\n  position: relative;\r\n  top: 230px;\r\n`;\r\nconst H3BoardTitle = styled.h3`\r\n  position: relative;\r\n  top: 25px;\r\n  left: 43px;\r\n`;\r\nconst InputNewBoard = styled.input`\r\n  position: relative;\r\n  top: 50px;\r\n  left: 40px;\r\n  font-size: 15px;\r\n  outline: none;\r\n  border: 2px solid rgb(0, 121, 191);\r\n  border-radius: 5px;\r\n  width: 256px;\r\n  height: 17px;\r\n  padding: 10px 10px;\r\n  resize: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\nconst ButtonNewBoard = styled.button`\r\n  position: relative;\r\n  top: 60px;\r\n  left: 115px;\r\n  outline: none;\r\n  border: none;\r\n  z-index: 1200;\r\n  border-radius: 5px;\r\n  background-color: rgb(90, 172, 68);\r\n  margin-top: 10px;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n`;\r\nconst CloseIconNewBoard = styled(CloseIcon)`\r\n  position: relative;\r\n  top: -50px;\r\n  left: 180px;\r\n  cursor: pointer;\r\n  color: rgb(108, 120, 141);\r\n  font-size: 28px;\r\n`;\r\n\r\ninterface Props {\r\n  setCreateBoard: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nconst BoardCreate: React.FC<Props> = ({ setCreateBoard }) => {\r\n  const history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n  const { boardId } = useSelector<RootState, BoardState>(\r\n    (state: RootState) => state.trello\r\n  );\r\n\r\n  const [newBoard, setNewBoard] = useState(\"\");\r\n\r\n  const onChangeBoard = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    setNewBoard(value);\r\n  };\r\n  const onClickAddBoard = () => {\r\n    if (newBoard !== \"\") {\r\n      onClickClose();\r\n      dispatch(addBoard(newBoard));\r\n      history.push(`/board/${boardId}`);\r\n    }\r\n  };\r\n  const onClickClose = () => {\r\n    setCreateBoard(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DivNewBoard>\r\n        <CardNewBoard>\r\n          <H3BoardTitle>New Board</H3BoardTitle>\r\n          <InputNewBoard\r\n            placeholder=\"Input Board Name ...\"\r\n            value={newBoard}\r\n            onChange={onChangeBoard}\r\n            maxLength={15}\r\n            autoFocus\r\n          />\r\n          <ButtonNewBoard onClick={onClickAddBoard}>\r\n            Create a Board\r\n          </ButtonNewBoard>\r\n          <CloseIconNewBoard onClick={onClickClose} />\r\n        </CardNewBoard>\r\n      </DivNewBoard>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","import {\r\n  CHANGE_BOARD_NAME,\r\n  ADD_BOARD,\r\n  STAR_BOARD,\r\n  DELETE_BOARD,\r\n  CHANGE_LIST_TITLE,\r\n  ADD_LIST,\r\n  COPY_LIST,\r\n  DELETE_LIST,\r\n  SORT_LIST,\r\n  ADD_CARD,\r\n  EDIT_CARD,\r\n  DELETE_CARD,\r\n} from \"./types\";\r\n\r\nexport interface ChangeBoardNameAction {\r\n  type: typeof CHANGE_BOARD_NAME;\r\n  newBoardName: string;\r\n  boardId: number;\r\n}\r\nexport interface AddBoardAction {\r\n  type: typeof ADD_BOARD;\r\n  newBoardName: string;\r\n}\r\nexport interface StarBoardAction {\r\n  type: typeof STAR_BOARD;\r\n  boardId: number;\r\n}\r\nexport interface DeleteBoardAction {\r\n  type: typeof DELETE_BOARD;\r\n  boardId: number;\r\n}\r\n\r\nexport interface ChangeListTitleAction {\r\n  type: typeof CHANGE_LIST_TITLE;\r\n  newTitle: string;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nexport interface AddListAction {\r\n  type: typeof ADD_LIST;\r\n  title: string;\r\n  boardId: number;\r\n}\r\n\r\nexport interface CopyListAction {\r\n  type: typeof COPY_LIST;\r\n  title: string;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nexport interface DeleteListAction {\r\n  type: typeof DELETE_LIST;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nexport interface SortListAction {\r\n  type: typeof SORT_LIST;\r\n  boardId: number;\r\n  droppableIdStart: string;\r\n  droppableIdEnd: string;\r\n  droppableIndexStart: number;\r\n  droppableIndexEnd: number;\r\n  draggableId: string;\r\n}\r\n\r\nexport interface AddCardAction {\r\n  type: typeof ADD_CARD;\r\n  card: string;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nexport interface EditCardAction {\r\n  type: typeof EDIT_CARD;\r\n  newCard: string;\r\n  index: number;\r\n  listIndex: number;\r\n  boardId: number;\r\n}\r\n\r\nexport interface DeleteCardAction {\r\n  type: typeof DELETE_CARD;\r\n  index: number;\r\n  listIndex: number;\r\n  boardId: number;\r\n}\r\n\r\nexport const changeBoardName = (newBoardName: string, boardId: number) => {\r\n  return {\r\n    type: CHANGE_BOARD_NAME,\r\n    newBoardName,\r\n    boardId,\r\n  };\r\n};\r\nexport const addBoard = (newBoardName: string) => {\r\n  return {\r\n    type: ADD_BOARD,\r\n    newBoardName,\r\n  };\r\n};\r\nexport const starBoard = (boardId: number) => {\r\n  return {\r\n    type: STAR_BOARD,\r\n    boardId,\r\n  };\r\n};\r\nexport const deleteBoard = (boardId: number) => {\r\n  return {\r\n    type: DELETE_BOARD,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const changeListTitle = (\r\n  newTitle: string,\r\n  index: number,\r\n  boardId: number\r\n) => {\r\n  return {\r\n    type: CHANGE_LIST_TITLE,\r\n    newTitle,\r\n    index,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const addList = (title: string, boardId: number) => {\r\n  return {\r\n    type: ADD_LIST,\r\n    title,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const copyList = (title: string, index: number, boardId: number) => {\r\n  return {\r\n    type: COPY_LIST,\r\n    title,\r\n    index,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const deleteList = (index: number, boardId: number) => {\r\n  return {\r\n    type: DELETE_LIST,\r\n    index,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const sortList = (\r\n  boardId: number,\r\n  droppableIdStart: string,\r\n  droppableIdEnd: string,\r\n  droppableIndexStart: number,\r\n  droppableIndexEnd: number,\r\n  draggableId: string\r\n) => {\r\n  return {\r\n    type: SORT_LIST,\r\n    boardId,\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n  };\r\n};\r\n\r\nexport const addCard = (card: string, index: number, boardId: number) => {\r\n  return {\r\n    type: ADD_CARD,\r\n    card,\r\n    index,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const editCard = (\r\n  newCard: string,\r\n  index: number,\r\n  listIndex: number,\r\n  boardId: number\r\n) => {\r\n  return {\r\n    type: EDIT_CARD,\r\n    newCard,\r\n    index,\r\n    listIndex,\r\n    boardId,\r\n  };\r\n};\r\n\r\nexport const deleteCard = (\r\n  index: number,\r\n  listIndex: number,\r\n  boardId: number\r\n) => {\r\n  return {\r\n    type: DELETE_CARD,\r\n    index,\r\n    listIndex,\r\n    boardId,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport BoardCreate from \"components/BoardCreate\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  appbar: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.1)\",\r\n    boxShadow: \"none\",\r\n  },\r\n  toolbar: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    minHeight: \"48px\",\r\n  },\r\n  flexbox: {\r\n    display: \"flex\",\r\n  },\r\n  homeLink: {\r\n    textDecoration: \"none\",\r\n    padding: \"5px\",\r\n  },\r\n  homeiconbutton: {\r\n    width: \"30px\",\r\n    height: \"30px\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      background: \"none\",\r\n    },\r\n  },\r\n  homebutton: {\r\n    backgroundColor: \"rgba(154,160,163, 0.9)\",\r\n    height: \"35px\",\r\n    textTransform: \"none\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"rgba(140,147,150, 0.9)\",\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: `\"Jua\", sans-serif`,\r\n    position: \"relative\",\r\n    right: \"20px\",\r\n    userSelect: \"none\",\r\n  },\r\n  addiconbutton: {\r\n    margin: \"0px 15px\",\r\n    backgroundColor: \"rgba(154,160,163, 0.9)\",\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    borderRadius: \"5px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"rgba(140,147,150, 0.9)\",\r\n    },\r\n  },\r\n  avatar: {\r\n    backgroundColor: \"rgb(223,225,230)\",\r\n    color: \"black\",\r\n    width: \"35px\",\r\n    height: \"35px\",\r\n    cursor: \"pointer\",\r\n  },\r\n});\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  const [createBoard, setCreateBoard] = useState(false);\r\n\r\n  const onClickNewBoard = () => {\r\n    setCreateBoard(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar className={classes.appbar}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <div className={classes.flexbox}>\r\n            <Link to=\"/\" className={classes.homeLink}>\r\n              <IconButton className={classes.homeiconbutton}>\r\n                <HomeIcon />\r\n              </IconButton>\r\n            </Link>\r\n            <Link to=\"/\" className={classes.homeLink}>\r\n              <Button className={classes.homebutton}>Boards</Button>\r\n            </Link>\r\n          </div>\r\n          <Typography className={classes.typography} variant=\"h6\">\r\n            Trello\r\n          </Typography>\r\n          <div className={classes.flexbox}>\r\n            <IconButton\r\n              className={classes.addiconbutton}\r\n              color=\"inherit\"\r\n              onClick={onClickNewBoard}\r\n            >\r\n              <AddIcon />\r\n            </IconButton>\r\n            <Avatar className={classes.avatar}>A</Avatar>\r\n          </div>\r\n          {createBoard ? <BoardCreate setCreateBoard={setCreateBoard} /> : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { RootState } from \"store/reducers\";\r\nimport { BoardState } from \"store/reducers/trello\";\r\n\r\nconst DivBoard = styled.div`\r\n  margin-top: 10px;\r\n  width: 730px;\r\n  height: 150px;\r\n  display: flex;\r\n  flex-flow: nowrap;\r\n  overflow: auto;\r\n  &::-webkit-scrollbar {\r\n    height: 11px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgb(191, 196, 206);\r\n    border-radius: 10px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background-color: rgb(218, 219, 226);\r\n    border-radius: 10px;\r\n  }\r\n`;\r\nconst DivBoardBox = styled.div`\r\n  border-radius: 3px;\r\n  background-color: white;\r\n  min-width: 145px;\r\n  max-width: 145px;\r\n  min-height: 80px;\r\n  max-height: 80px;\r\n  padding: 15px;\r\n  transition: all 0.3s ease;\r\n  &:hover {\r\n    backgroundcolor: rgb(231, 233, 237);\r\n  }\r\n`;\r\nconst DivBoardLink = styled(Link)`\r\n  position: relative;\r\n  left: -7px;\r\n  height: 80px;\r\n  text-decoration: none;\r\n  color: black;\r\n  font-size: 17px;\r\n  margin: 6px 8px;\r\n  &:hover {\r\n    color: black;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  star?: boolean;\r\n}\r\n\r\nconst TrelloBoards: React.FC<Props> = ({ star }) => {\r\n  const { boards } = useSelector<RootState, BoardState>(\r\n    (state: RootState) => state.trello\r\n  );\r\n\r\n  const AllBoards = () => {\r\n    return (\r\n      <DivBoard>\r\n        {boards.map((v, i) => (\r\n          <DivBoardLink key={i} to={`/board/${v.id}`}>\r\n            <DivBoardBox>{v.boardName}</DivBoardBox>\r\n          </DivBoardLink>\r\n        ))}\r\n      </DivBoard>\r\n    );\r\n  };\r\n  const StarBoards = () => {\r\n    return (\r\n      <DivBoard>\r\n        {boards.map((v, i) => {\r\n          if (v.star === true) {\r\n            return (\r\n              <DivBoardLink key={i} to={`/board/${v.id}`}>\r\n                <DivBoardBox>{v.boardName}</DivBoardBox>\r\n              </DivBoardLink>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n      </DivBoard>\r\n    );\r\n  };\r\n\r\n  return star ? StarBoards() : AllBoards();\r\n};\r\n\r\nexport default TrelloBoards;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { RootState } from \"store/reducers\";\r\nimport { BoardState } from \"store/reducers/trello\";\r\n\r\nimport Navbar from \"components/Navbar\";\r\nimport TrelloBoards from \"components/TrelloBoards\";\r\n\r\nconst DivHome = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst DivBoards = styled.div`\r\n  margin: 20px;\r\n`;\r\n\r\nconst Trello = () => {\r\n  const { starCount } = useSelector<RootState, BoardState>(\r\n    (state: RootState) => state.trello\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <DivHome>\r\n        <DivBoards>\r\n          <h3>My Boards</h3>\r\n          <TrelloBoards />\r\n        </DivBoards>\r\n        {starCount === 0 ? null : (\r\n          <DivBoards>\r\n            <h3>Starred Boards</h3>\r\n            <TrelloBoards star />\r\n          </DivBoards>\r\n        )}\r\n      </DivHome>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Trello;\r\n","import React from \"react\";\r\nimport { useState, useEffect, Dispatch, SetStateAction } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { editCard, deleteCard } from \"store/actions/trello\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst PaperCardContent = styled(Paper)`\r\n  min-height: 22px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 12px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    backgroundcolor: rgb(244, 245, 247);\r\n  }\r\n  &.dragging {\r\n    opacity: 0.4;\r\n  }\r\n  &:hover svg {\r\n    display: block;\r\n  }\r\n`;\r\nconst PListText = styled.p`\r\n  max-width: 250px;\r\n  word-break: break-word;\r\n`;\r\nconst CreateIconCardContent = styled(CreateIcon)`\r\n  color: rgb(131, 140, 145);\r\n  display: none;\r\n  padding: 10px;\r\n  position: absolute;\r\n  top: 4px;\r\n  right: 4px;\r\n  font-size: 16px;\r\n  border-radius: 5px;\r\n  &:hover {\r\n    color: black;\r\n    background-color: rgb(235, 236, 240);\r\n  }\r\n`;\r\nconst DivBlack = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 1100;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\nconst DivEmptyBox = styled.div`\r\n  height: 82px;\r\n`;\r\nconst TextareaCardContent = styled.textarea`\r\n  position: absolute;\r\n  top: -12px;\r\n  left: 0;\r\n  font-size: 16px;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  width: 252px;\r\n  height: 60px;\r\n  padding: 12px 12px;\r\n  margin-top: 12px;\r\n  resize: none;\r\n  z-index: 1200;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\nconst CloseIconCardContent = styled(CloseIcon)`\r\n  position: absolute;\r\n  top: 93px;\r\n  left: 245px;\r\n  cursor: pointer;\r\n  color: black;\r\n  font-size: 25px;\r\n  z-index: 1200;\r\n`;\r\nconst ButtonCardEdit = styled.button`\r\n  position: absolute;\r\n  top: 80px;\r\n  left: 0px;\r\n  outline: none;\r\n  border: none;\r\n  z-index: 1200;\r\n  border-radius: 5px;\r\n  background-color: rgb(90, 172, 68);\r\n  margin-top: 10px;\r\n  color: white;\r\n  padding: 8px 21px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\nconst ButtonCardDelete = styled.button`\r\n  position: absolute;\r\n  top: 80px;\r\n  left: 85px;\r\n  outline: none;\r\n  border: none;\r\n  z-index: 1200;\r\n  border-radius: 5px;\r\n  background-color: rgb(250, 60, 84);\r\n  margin-top: 10px;\r\n  color: white;\r\n  padding: 8px 15px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\n\r\ninterface Props {\r\n  edit?: boolean;\r\n  setCardEditBox: Dispatch<SetStateAction<boolean>>;\r\n  list: string;\r\n  index: number;\r\n  listIndex: number;\r\n  boardId: number;\r\n}\r\n\r\nconst CardContent: React.FC<Props> = ({\r\n  edit,\r\n  setCardEditBox,\r\n  list,\r\n  index,\r\n  listIndex,\r\n  boardId,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [editList, setEditList] = useState(list);\r\n\r\n  useEffect(() => {\r\n    setEditList(list);\r\n  }, [list]);\r\n\r\n  const onClickEditOpen = () => {\r\n    setCardEditBox(true);\r\n  };\r\n  const onClickEditClose = () => {\r\n    setCardEditBox(false);\r\n  };\r\n  const onChangeEditList = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    setEditList(value);\r\n  };\r\n  const onClickSave = () => {\r\n    if (editList !== \"\") {\r\n      dispatch(editCard(editList, index, listIndex, boardId));\r\n    }\r\n    onClickEditClose();\r\n  };\r\n  const onClickDelete = () => {\r\n    dispatch(deleteCard(index, listIndex, boardId));\r\n    onClickEditClose();\r\n  };\r\n\r\n  const ContentCard = () => {\r\n    return (\r\n      <PaperCardContent>\r\n        <PListText>{list}</PListText>\r\n        <CreateIconCardContent onClick={onClickEditOpen} />\r\n      </PaperCardContent>\r\n    );\r\n  };\r\n  const EditCard = () => {\r\n    return (\r\n      <>\r\n        <DivBlack onClick={onClickEditClose}></DivBlack>\r\n        <DivEmptyBox></DivEmptyBox>\r\n        <TextareaCardContent\r\n          placeholder=\"Input card ...\"\r\n          value={editList}\r\n          onChange={onChangeEditList}\r\n          autoFocus\r\n        />\r\n        <CloseIconCardContent onClick={onClickEditClose} />\r\n        <ButtonCardEdit onClick={onClickSave}>Save</ButtonCardEdit>\r\n        <ButtonCardDelete onClick={onClickDelete}>Delete</ButtonCardDelete>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return edit ? EditCard() : ContentCard();\r\n};\r\n\r\nexport default CardContent;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport CardContent from \"components/CardContent\";\r\n\r\nconst DivCardMargin = styled.div`\r\n  margin-bottom: 8px;\r\n`;\r\n\r\ninterface Props {\r\n  list: string;\r\n  cardId: string;\r\n  index: number;\r\n  listIndex: number;\r\n  boardId: number;\r\n}\r\n\r\nconst ListCard: React.FC<Props> = ({\r\n  list,\r\n  cardId,\r\n  index,\r\n  listIndex,\r\n  boardId,\r\n}) => {\r\n  const [cardEditBox, setCardEditBox] = useState(false);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <Draggable\r\n        key={String(cardId)}\r\n        draggableId={String(cardId)}\r\n        index={index}\r\n      >\r\n        {(provided) => (\r\n          <DivCardMargin\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <CardContent\r\n              list={list}\r\n              setCardEditBox={setCardEditBox}\r\n              index={index}\r\n              listIndex={listIndex}\r\n              boardId={boardId}\r\n            />\r\n          </DivCardMargin>\r\n        )}\r\n      </Draggable>\r\n      {cardEditBox ? (\r\n        <CardContent\r\n          edit\r\n          list={list}\r\n          setCardEditBox={setCardEditBox}\r\n          index={index}\r\n          listIndex={listIndex}\r\n          boardId={boardId}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListCard;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { changeListTitle } from \"store/actions/trello\";\r\n\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\nconst CardHeaderTitle = styled(CardHeader)`\r\n  margin: 13px 10px 0px 10px;\r\n  font-size: 18px;\r\n  width: 205px;\r\n  height: 1px;\r\n  cursor: pointer;\r\n`;\r\nconst InputTitle = styled.input`\r\n  margin: 13px 10px 0px 13px;\r\n  padding: 2px 11px;\r\n  font-size: 18px;\r\n  outline: none;\r\n  border: 2px solid rgb(0, 121, 191);\r\n  border-radius: 5px;\r\n  width: 210px;\r\n  height: 25px;\r\n`;\r\n\r\ninterface Props {\r\n  title: string;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nconst ListTitle: React.FC<Props> = ({ title, index, boardId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [changeTitle, setChangeTitle] = useState(false);\r\n  const [textTitle, setTextTitle] = useState(title);\r\n\r\n  useEffect(() => {\r\n    setTextTitle(title);\r\n  }, [title]);\r\n\r\n  const onClickTitle = () => {\r\n    setChangeTitle(true);\r\n  };\r\n  const onSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onBlurInput();\r\n  };\r\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    setTextTitle(value);\r\n  };\r\n  const onBlurInput = () => {\r\n    if (textTitle !== \"\") {\r\n      dispatch(changeListTitle(textTitle, index, boardId));\r\n    }\r\n    setChangeTitle(false);\r\n  };\r\n\r\n  const Title = () => {\r\n    return (\r\n      <CardHeaderTitle title={title} disableTypography onClick={onClickTitle} />\r\n    );\r\n  };\r\n  const TitleForm = () => {\r\n    return (\r\n      <form onSubmit={onSubmitForm}>\r\n        <InputTitle\r\n          value={textTitle}\r\n          onChange={onChangeInput}\r\n          onBlur={onBlurInput}\r\n          maxLength={15}\r\n          autoFocus\r\n        />\r\n      </form>\r\n    );\r\n  };\r\n\r\n  return changeTitle ? TitleForm() : Title();\r\n};\r\n\r\nexport default ListTitle;\r\n","import React from \"react\";\r\nimport { useState, Dispatch, SetStateAction } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { copyList, deleteList } from \"store/actions/trello\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst DivActionBt = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-top: 15px;\r\n`;\r\nconst ButtonListAc = styled(Button)`\r\n  width: 179px;\r\n`;\r\nconst DivAction = styled.div`\r\n  margin: 20px 15px;\r\n`;\r\nconst InputCopy = styled.input`\r\n  font-size: 15px;\r\n  outline: none;\r\n  border: 2px solid rgb(0, 121, 191);\r\n  border-radius: 5px;\r\n  width: 145px;\r\n  height: 12px;\r\n  padding: 10px 10px;\r\n  margin: 8px 0px;\r\n  resize: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\nconst ButtonCopyAc = styled.button`\r\n  position: relative;\r\n  left: 48px;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  border: none;\r\n  background-color: rgb(90, 172, 68);\r\n  color: white;\r\n  padding: 6px 13px;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n`;\r\nconst PDelete = styled.p`\r\n  margin: 35px 0 20px 0;\r\n`;\r\nconst ButtonDeleteAc = styled.button`\r\n  margin: 0px 47px;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  border: none;\r\n  background-color: rgb(250, 60, 84);\r\n  color: white;\r\n  padding: 6px 16px;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n`;\r\nconst PaperListAc = styled(Paper)`\r\n  z-index: 100;\r\n  position: absolute;\r\n  top: 13px;\r\n  right: -160px;\r\n  width: 200px;\r\n  height: 165px;\r\n  border: 1px solid rgb(218, 219, 226);\r\n`;\r\nconst TypographyListAc = styled(Typography)`\r\n  font-family: \"Jua\", sans-serif;\r\n  position: relative;\r\n  top: 8px;\r\n  text-align: center;\r\n`;\r\nconst CloseIconListAc = styled(CloseIcon)`\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 9px;\r\n  font-size: 17px;\r\n  cursor: pointer;\r\n`;\r\nconst HrListAc = styled.hr`\r\n  position: relative;\r\n  top: 10px;\r\n  width: 170px;\r\n  margin: auto;\r\n  border: 1px solid rgb(218, 219, 226);\r\n  background-color: rgb(218, 219, 226);\r\n`;\r\n\r\ninterface Props {\r\n  setActionOpen: Dispatch<SetStateAction<boolean>>;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nconst ListAction: React.FC<Props> = ({ setActionOpen, index, boardId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [newList, setNewList] = useState(\"\");\r\n  const [copyAction, setCopyAction] = useState(false);\r\n  const [deleteAction, setDeleteAction] = useState(false);\r\n\r\n  const onClickListAcClose = () => {\r\n    setActionOpen(false);\r\n  };\r\n  const onClickListAcAddCard = () => {\r\n    onClickListAcClose();\r\n  };\r\n  const onClickListAcCopy = () => {\r\n    setCopyAction(true);\r\n  };\r\n  const onClickListAcDelete = () => {\r\n    setDeleteAction(true);\r\n  };\r\n  const onChangeList = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    setNewList(value);\r\n  };\r\n  const onClickAddList = () => {\r\n    if (newList !== \"\") {\r\n      onClickListAcClose();\r\n      dispatch(copyList(newList, index, boardId));\r\n      setNewList(\"\");\r\n    }\r\n  };\r\n  const onClickDeleteList = () => {\r\n    onClickListAcClose();\r\n    dispatch(deleteList(index, boardId));\r\n  };\r\n\r\n  const ActionHome = () => {\r\n    return (\r\n      <DivActionBt>\r\n        <ButtonListAc onClick={onClickListAcAddCard} disableRipple>\r\n          Add Card\r\n        </ButtonListAc>\r\n        <ButtonListAc onClick={onClickListAcCopy} disableRipple>\r\n          Copy List\r\n        </ButtonListAc>\r\n        <ButtonListAc onClick={onClickListAcDelete} disableRipple>\r\n          Delete This List\r\n        </ButtonListAc>\r\n      </DivActionBt>\r\n    );\r\n  };\r\n  const ListCopy = () => {\r\n    return (\r\n      <DivAction>\r\n        <p>Name</p>\r\n        <InputCopy\r\n          placeholder=\"Input List title ...\"\r\n          value={newList}\r\n          onChange={onChangeList}\r\n          maxLength={15}\r\n          autoFocus\r\n        />\r\n        <ButtonCopyAc onClick={onClickAddList}>Create</ButtonCopyAc>\r\n      </DivAction>\r\n    );\r\n  };\r\n  const ListDelete = () => {\r\n    return (\r\n      <DivAction>\r\n        <PDelete>삭제 후 되돌릴 수 없습니다.</PDelete>\r\n        <ButtonDeleteAc onClick={onClickDeleteList}>Delete</ButtonDeleteAc>\r\n      </DivAction>\r\n    );\r\n  };\r\n\r\n  const ActionTitle = copyAction\r\n    ? \"Copy List\"\r\n    : deleteAction\r\n    ? \"Delete List\"\r\n    : \"List Actions\";\r\n\r\n  return (\r\n    <>\r\n      <PaperListAc onMouseLeave={onClickListAcClose}>\r\n        <TypographyListAc variant=\"subtitle1\">{ActionTitle}</TypographyListAc>\r\n        <CloseIconListAc onClick={onClickListAcClose} />\r\n        <HrListAc />\r\n        {copyAction ? ListCopy() : deleteAction ? ListDelete() : ActionHome()}\r\n      </PaperListAc>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListAction;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { addCard, addList } from \"store/actions/trello\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst ButtonLCAc = styled(Button)<{ mycolor: string }>`\r\n  padding: 8px;\r\n  width: 278px;\r\n  text-transform: none;\r\n  border-radius: 5px;\r\n  color: ${(props) => props.mycolor};\r\n`;\r\nconst DivBackGroundColor = styled.div<{ backgroundColor: string }>`\r\n  padding: 8px;\r\n  border-radius: 5px;\r\n  background-color: ${(props) => props.backgroundColor};\r\n`;\r\nconst TextareaLCAc = styled.textarea<{ height: string }>`\r\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\r\n    0px 1px 3px 0px rgba(0, 0, 0, 0.12);\r\n  font-size: 16px;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  width: 256px;\r\n  padding: 10px 10px;\r\n  resize: none;\r\n  height: ${(props) => props.height};\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\nconst ButtonAddLCAc = styled.button`\r\n  border-radius: 5px;\r\n  outline: none;\r\n  border: none;\r\n  background-color: rgb(90, 172, 68);\r\n  margin-top: 5px;\r\n  color: white;\r\n  padding: 6px 10px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n`;\r\nconst CloseIconLCAc = styled(CloseIcon)`\r\n  position: relative;\r\n  top: 5px;\r\n  left: 8px;\r\n  cursor: pointer;\r\n  color: rgb(108, 120, 141);\r\n  font-size: 25px;\r\n`;\r\n\r\ninterface Props {\r\n  list?: boolean;\r\n  index: number;\r\n  boardId: number;\r\n}\r\n\r\nconst ListCardAdd: React.FC<Props> = ({ list, index, boardId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [addInput, setaddInput] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n  const inputEl = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const onClickOpen = () => {\r\n    setaddInput(true);\r\n  };\r\n  const onClickClose = () => {\r\n    setaddInput(false);\r\n    setText(\"\");\r\n  };\r\n  const onChangeCard = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { value } = e.target;\r\n    setText(value);\r\n  };\r\n  const onClickAddCard = () => {\r\n    if (text !== \"\") {\r\n      if (list) {\r\n        dispatch(addList(text, boardId));\r\n        onClickClose();\r\n      } else {\r\n        dispatch(addCard(text, index, boardId));\r\n      }\r\n      setText(\"\");\r\n    }\r\n    if (inputEl.current) {\r\n      inputEl.current.focus();\r\n    }\r\n  };\r\n\r\n  const placeholder = list ? \"Input list...\" : \"Input card...\";\r\n  const buttonValue = list ? \"+ Add a List\" : \"+ Add a Card\";\r\n  const AddButtonValue = list ? \"Add List\" : \"Add Card\";\r\n  const buttonValueColor = list ? \"white\" : \"black\";\r\n  const BackgroundColor = list ? \"rgb(235,236,240)\" : \"inherit\";\r\n  const InputHeight = list ? \"20px\" : \"60px\";\r\n\r\n  const AddButton = () => {\r\n    return (\r\n      <ButtonLCAc mycolor={buttonValueColor} onClick={onClickOpen} disableRipple>\r\n        {buttonValue}\r\n      </ButtonLCAc>\r\n    );\r\n  };\r\n  const AddInput = () => {\r\n    return (\r\n      <DivBackGroundColor backgroundColor={BackgroundColor}>\r\n        <TextareaLCAc\r\n          height={InputHeight}\r\n          ref={inputEl}\r\n          placeholder={placeholder}\r\n          value={text}\r\n          onChange={onChangeCard}\r\n          autoFocus\r\n        />\r\n        <ButtonAddLCAc onClick={onClickAddCard}>{AddButtonValue}</ButtonAddLCAc>\r\n        <CloseIconLCAc onClick={onClickClose} />\r\n      </DivBackGroundColor>\r\n    );\r\n  };\r\n\r\n  return addInput ? AddInput() : AddButton();\r\n};\r\n\r\nexport default ListCardAdd;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { CardType } from \"store/reducers/trello\";\r\n\r\nimport ListCard from \"components/Card\";\r\nimport ListTitle from \"components/ListTitle\";\r\nimport ListAction from \"components/ListAction\";\r\nimport ListCardAdd from \"components/ListCardAdd\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nconst CardList = styled(Card)`\r\n  flex-shrink: 0;\r\n  position: relative;\r\n  background-color: rgb(235, 236, 240);\r\n  width: 300px;\r\n  height: 100%;\r\n  margin: 0 0 0 16px;\r\n  overflow: visible;\r\n`;\r\nconst ButtonAction = styled.button`\r\n  font-size: 18px;\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 12px;\r\n  font-weight: bold;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 50px;\r\n  background-color: rgb(235, 236, 240);\r\n`;\r\nconst CardContentList = styled(CardContent)`\r\n  margin-top: 10px;\r\n  padding: 0 12px;\r\n  overflow: auto;\r\n  max-height: 375px;\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgb(191, 196, 206);\r\n    border-radius: 10px;\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background-color: rgb(218, 219, 226);\r\n    border-radius: 10px;\r\n  }\r\n`;\r\nconst DivCardAction = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 278px;\r\n  margin: auto;\r\n  margin-bottom: 6px;\r\n`;\r\n\r\ninterface Props {\r\n  title: string;\r\n  list: CardType;\r\n  index: number;\r\n  boardId: number;\r\n  listId: string;\r\n}\r\n\r\nconst List: React.FC<Props> = ({ title, list, index, boardId, listId }) => {\r\n  const [actionOpen, setActionOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <CardList>\r\n        <ListTitle title={title} index={index} boardId={boardId} />\r\n        <ButtonAction onClick={() => setActionOpen(true)}>⋯</ButtonAction>\r\n        {actionOpen ? (\r\n          <ListAction\r\n            setActionOpen={setActionOpen}\r\n            index={index}\r\n            boardId={boardId}\r\n          />\r\n        ) : null}\r\n        <Droppable droppableId={String(listId)}>\r\n          {(provided) => (\r\n            <CardContentList\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {list.map((v, i) => (\r\n                <ListCard\r\n                  key={i}\r\n                  list={v.text}\r\n                  cardId={v.id}\r\n                  index={i}\r\n                  listIndex={index}\r\n                  boardId={boardId}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </CardContentList>\r\n          )}\r\n        </Droppable>\r\n        <DivCardAction>\r\n          <ListCardAdd index={index} boardId={boardId} />\r\n        </DivCardAction>\r\n      </CardList>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { starBoard } from \"store/actions/trello\";\r\n\r\nconst ButtonStar = styled.button`\r\n  margin: 0 16px;\r\n  background-color: rgba(154, 160, 163, 0.9);\r\n  width: 35px;\r\n  height: 35px;\r\n  textt-tansform: none;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  &:hover {\r\n    background-color: rgba(171, 177, 180, 0.9);\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  boardStar: boolean;\r\n  boardId: number;\r\n}\r\n\r\nconst BoardStarButton: React.FC<Props> = ({ boardStar, boardId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onClickStar = () => {\r\n    dispatch(starBoard(boardId));\r\n  };\r\n\r\n  const StarColor = boardStar ? \"yellow\" : \"white\";\r\n\r\n  return (\r\n    <ButtonStar style={{ color: StarColor }} onClick={onClickStar}>\r\n      ☆\r\n    </ButtonStar>\r\n  );\r\n};\r\n\r\nexport default BoardStarButton;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { changeBoardName } from \"store/actions/trello\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst TypographyBoardTitle = styled(Typography)`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 60px;\r\n  padding: 4px 12px 2px 12px;\r\n  flex: 0 1 auto;\r\n  color: white;\r\n  border-radius: 5px;\r\n  font-family: \"Jua\", sans-serif;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n  white-space: pre;\r\n  &:hover {\r\n    background-color: rgba(154, 160, 163, 0.9);\r\n  }\r\n`;\r\nconst FormBoardTitle = styled.form`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 60px;\r\n`;\r\nconst InputBoardTitle = styled.input`\r\n  padding: 0 12px;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  width: 230px;\r\n  height: 34px;\r\n  font-size: 18px;\r\n  white-space: pre;\r\n`;\r\n\r\ninterface Props {\r\n  boardName: string;\r\n  boardId: number;\r\n}\r\n\r\nconst BoardTitle: React.FC<Props> = ({ boardName, boardId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [titleInput, setTitleInput] = useState(false);\r\n  const [boardText, setBoardText] = useState(boardName);\r\n\r\n  const onChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    setBoardText(value);\r\n  };\r\n\r\n  const onSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onBlurInput();\r\n  };\r\n  const onBlurInput = () => {\r\n    if (boardText !== \"\") {\r\n      dispatch(changeBoardName(boardText, boardId));\r\n      setTitleInput(false);\r\n    }\r\n  };\r\n\r\n  const BoardTitleText = () => {\r\n    return (\r\n      <TypographyBoardTitle variant=\"h6\" onClick={() => setTitleInput(true)}>\r\n        {boardName}\r\n      </TypographyBoardTitle>\r\n    );\r\n  };\r\n  const BoardTitleInput = () => {\r\n    return (\r\n      <FormBoardTitle onSubmit={onSubmitForm}>\r\n        <InputBoardTitle\r\n          value={boardText}\r\n          onChange={onChangeName}\r\n          onBlur={onBlurInput}\r\n          maxLength={15}\r\n          autoFocus\r\n        />\r\n      </FormBoardTitle>\r\n    );\r\n  };\r\n\r\n  return titleInput ? BoardTitleInput() : BoardTitleText();\r\n};\r\n\r\nexport default BoardTitle;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { deleteBoard } from \"store/actions/trello\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst ButtonBoardDelete = styled.button`\r\n  position: absolute;\r\n  right: 20px;\r\n  background-color: rgba(154, 160, 163, 0.9);\r\n  width: 35px;\r\n  height: 35px;\r\n  text-transform: none;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: rgba(171, 177, 180, 0.9);\r\n  }\r\n`;\r\nconst DivBoardDelete = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 1100;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\nconst CardBoardDelete = styled(Card)`\r\n  background-color: rgb(235, 236, 240);\r\n  width: 370px;\r\n  height: 200px;\r\n  margin: auto;\r\n  position: relative;\r\n  top: 230px;\r\n`;\r\nconst H3BoardDelete = styled.h3`\r\n  position: relative;\r\n  top: 25px;\r\n  left: 43px;\r\n`;\r\nconst PBoardDelete = styled.p`\r\n  position: relative;\r\n  top: 50px;\r\n  left: 83px;\r\n  font-size: 20px;\r\n  color: black;\r\n`;\r\nconst ButtonBoardDeleteDispatch = styled.button`\r\n  position: relative;\r\n  top: 70px;\r\n  left: 110px;\r\n  outline: none;\r\n  border: none;\r\n  z-index: 1200;\r\n  border-radius: 5px;\r\n  background-color: rgb(250, 60, 84);\r\n  margin-top: 10px;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n`;\r\nconst CloseIconBoardDelete = styled(CloseIcon)`\r\n  position: relative;\r\n  top: -35px;\r\n  left: 165px;\r\n  cursor: pointer;\r\n  color: rgb(108, 120, 141);\r\n  font-size: 28px;\r\n`;\r\n\r\ninterface Props {\r\n  boardId: number;\r\n}\r\n\r\nconst BoardDelete: React.FC<Props> = ({ boardId }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [deleteBox, setDeleteBox] = useState(false);\r\n\r\n  const onClickDeleteBoard = () => {\r\n    dispatch(deleteBoard(boardId));\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const DeleteButton = () => {\r\n    return (\r\n      <>\r\n        <ButtonBoardDelete onClick={() => setDeleteBox(true)}>\r\n          <DeleteIcon style={{ fontSize: \"20px\", color: \"white\" }} />\r\n        </ButtonBoardDelete>\r\n      </>\r\n    );\r\n  };\r\n  const DeleteAction = () => {\r\n    return (\r\n      <>\r\n        {DeleteButton()}\r\n        <DivBoardDelete>\r\n          <CardBoardDelete>\r\n            <H3BoardDelete>Delete Board</H3BoardDelete>\r\n            <PBoardDelete>삭제 후 되돌릴 수 없습니다.</PBoardDelete>\r\n            <ButtonBoardDeleteDispatch onClick={onClickDeleteBoard}>\r\n              Delete This Board\r\n            </ButtonBoardDeleteDispatch>\r\n            <CloseIconBoardDelete onClick={() => setDeleteBox(false)} />\r\n          </CardBoardDelete>\r\n        </DivBoardDelete>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return deleteBox ? DeleteAction() : DeleteButton();\r\n};\r\n\r\nexport default BoardDelete;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useRouteMatch } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { sortList } from \"store/actions/trello\";\r\nimport { RootState } from \"store/reducers\";\r\nimport { BoardState, ListType, CardType } from \"store/reducers/trello\";\r\n\r\nimport List from \"components/List\";\r\nimport Navbar from \"components/Navbar\";\r\nimport BoardStarButton from \"components/BoardStar\";\r\nimport BoardTitle from \"components/BoardTitle\";\r\nimport BoardDelete from \"components/BoardDelete\";\r\nimport ListCardAdd from \"components/ListCardAdd\";\r\n\r\nconst DivScreen = styled.div`\r\n  max-width: 98vw;\r\n  max-height: 90vh;\r\n  position: relative;\r\n  top: 58px;\r\n  left: 1vw;\r\n`;\r\nconst DivFlex = styled.div`\r\n  display: flex;\r\n  margin-bottom: 12px;\r\n`;\r\nconst DivListAdd = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 290px;\r\n  height: 100%;\r\n  background-color: rgba(154, 160, 163, 0.9);\r\n  border-radius: 5px;\r\n  margin: 0 16px;\r\n`;\r\n\r\nconst Board = () => {\r\n  const match = useRouteMatch<{ boardId: string }>();\r\n  const boardId = Number(match.params.boardId);\r\n\r\n  const dispatch = useDispatch();\r\n  const { boards } = useSelector<RootState, BoardState>(\r\n    (state: RootState) => state.trello\r\n  );\r\n  let lists: ListType = [];\r\n  let firstBoardName: string = \"\";\r\n  let boardStar: boolean = false;\r\n  boards.forEach((v, i) => {\r\n    if (v.id === boardId) {\r\n      lists = boards[i].lists;\r\n      firstBoardName = boards[i].boardName;\r\n      boardStar = boards[i].star;\r\n    }\r\n  });\r\n\r\n  const [boardName, setBoardName] = useState(firstBoardName);\r\n\r\n  useEffect(() => {\r\n    setBoardName(firstBoardName);\r\n  }, [firstBoardName]);\r\n\r\n  const onDragEnd = (result: any) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    dispatch(\r\n      sortList(\r\n        boardId,\r\n        source.droppableId,\r\n        destination.droppableId,\r\n        source.index,\r\n        destination.index,\r\n        draggableId\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <DivScreen>\r\n        <DivFlex>\r\n          <BoardStarButton boardStar={boardStar} boardId={boardId} />\r\n          <BoardTitle boardName={boardName} boardId={boardId} />\r\n          <BoardDelete boardId={boardId} />\r\n        </DivFlex>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <DivFlex>\r\n            {lists === undefined ? null : (\r\n              <>\r\n                {lists.map(\r\n                  (\r\n                    v: { id: string; title: string; cards: CardType },\r\n                    i: number\r\n                  ) => (\r\n                    <List\r\n                      key={i}\r\n                      title={v.title}\r\n                      list={v.cards}\r\n                      index={i}\r\n                      boardId={boardId}\r\n                      listId={v.id}\r\n                    />\r\n                  )\r\n                )}\r\n              </>\r\n            )}\r\n            <DivListAdd>\r\n              <ListCardAdd list index={0} boardId={boardId} />\r\n            </DivListAdd>\r\n          </DivFlex>\r\n        </DragDropContext>\r\n      </DivScreen>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Trello from \"components/Trello\";\nimport Board from \"components/Board\";\n\nconst App = () => {\n  return (\n    <>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Trello} />\n          <Route exact path=\"/board/:boardId\" component={Board} />\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport { store, persistor } from \"./store\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}